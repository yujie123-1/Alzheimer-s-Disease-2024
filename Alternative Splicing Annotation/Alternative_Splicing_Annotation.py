def annotate_clusters(file1, file3, output_file):
    exons = {}  
    with open(file1, 'r', encoding='utf-8') as f1:  
        for line in f1:  
            chromosome, position_1, position_2, strand, gene_name = line.strip().split('\t') 
            position_1, position_2 = int(position_1), int(position_2) 
            if chromosome not in exons:  
                exons[chromosome] = []  
            exons[chromosome].append((position_1, position_2))  
    cluster_positions = {}
    with open(file3, 'r', encoding='utf-8') as f3, open(output_file, 'w', encoding='utf-8') as out:  
        out.write("Cluster"+"\t"+"ASevent"+"\n")  
        for line in f3:  
            parts = line.strip().split('\t')  
            cluster_info = parts[0]  
            chromosome, position_1, position_2, cluster = cluster_info.split(':')  
            position_1, position_2 = int(position_1), int(position_2)  
            if cluster not in cluster_positions:
                cluster_positions[cluster] = set()
            cluster_positions[cluster].add(position_1)
            cluster_positions[cluster].add(position_2)
        annotation = ''
        for cluster, positions in cluster_positions.items():
            unique_positions = len(positions)  
            out.write(f"{cluster}\t{unique_positions}\t")  
            if chromosome in exons:
                for exon_start, exon_end in exons[chromosome]:
                    in_exon = False  
                    for position in positions:
                        if exon_start < position < exon_end:  
                            in_exon = True
                            break
                    if in_exon: 
                        if len(positions) > 3:
                            annotation = 'Complex_Splicing'
                        else:
                            annotation = '5_or_3_Exon_Extension'
                        break
                else:
                    if len(positions) == 4:
                        annotation = 'Exon_Skipping'
                    else:
                        annotation = 'ES_or_Alternative_Start_or_End'
            else:
                annotation = 'no_Alternative_Splicing_Event_Was_Found'
            out.write(annotation + '\n')

#
# change the names of Folders and files and files
file1 = "Folder/file" # exon information of the corresponding species
file3 = "Folder/file" # Intron clustering file generated by leafcutter
output_file = "Folder/file" # Annotation of alternative splicing results
annotate_clusters(file1, file3, output_file)




